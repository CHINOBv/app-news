{"version":3,"sources":["components/Header/Header.jsx","components/New.jsx","components/News.jsx","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","titulo","Component","New","Nw","urlToImage","title","url","source","description","src","alt","name","href","target","News","map","key","Form","Catg","React","createRef","SendC","e","preventDefault","consNews","current","value","onSubmit","ref","defaultValue","type","App","state","APid","fetch","then","res","json","setState","articles","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0PAeeA,G,uLAVP,OACC,oCACG,4BAAQC,UAAU,sCACjB,4BAAKC,KAAKC,MAAMC,c,GANRC,cCuBNC,E,iLApBJ,IAAD,EAC+CJ,KAAKC,MAAMI,GAA1DC,EADA,EACAA,WAAYC,EADZ,EACYA,MAAOC,EADnB,EACmBA,IAAKC,EADxB,EACwBA,OAAOC,EAD/B,EAC+BA,YAEvC,OACC,yBAAKX,UAAU,uBACd,yBAAKA,UAAU,QACb,yBAAKY,IAAKL,EAAYP,UAAU,eAAea,IAAKL,IACpD,0BAAMR,UAAU,cAAcU,EAAOI,MACrC,yBAAKd,UAAU,aACb,wBAAIA,UAAU,cAAcQ,GAC5B,uBAAGR,UAAU,aAAaW,GAC1B,uBAAGI,KAAMN,EAAKT,UAAU,kBAAkBgB,OAAO,UAAjD,kB,GAbUZ,aCkBHa,E,iLAbP,OACI,yBAAKjB,UAAU,OACbC,KAAKC,MAAMe,KAAKC,KAAI,SAAAZ,GAAE,OACrB,kBAAC,EAAD,CACAa,IAAKb,EAAGG,IACRH,GAAIA,Y,GATAF,aCoCJgB,E,2MApCdC,KAAOC,IAAMC,Y,EAEbC,MAAO,SAACC,GACPA,EAAEC,iBAEF,EAAKxB,MAAMyB,SAAS,EAAKN,KAAKO,QAAQC,Q,wEAIhC,OAEK,yBAAK7B,UAAU,2CACd,yBAAKA,UAAU,cACd,0BAAM8B,SAAU7B,KAAKuB,OACpB,mDAER,4BAAQO,IAAK9B,KAAKoB,KAAMrB,UAAU,qBACjC,4BAAQ6B,MAAM,UAAUG,cAAY,GAApC,WACA,4BAAQH,MAAM,gBAAgBG,cAAY,GAA1C,mBACA,4BAAQH,MAAM,SAASG,cAAY,GAAnC,SACA,4BAAQH,MAAM,UAAUG,cAAY,GAApC,WACA,4BAAQH,MAAM,SAASG,cAAY,GAAnC,YACA,4BAAQH,MAAM,aAAaG,cAAY,GAAvC,eAIQ,2BAAOC,KAAK,SAASjC,UAAU,2BAA2B6B,MAAM,kB,GA5B9DzB,aCgDJ8B,E,2MA1CXC,MAAQ,CACNlB,KAAK,I,EAOPU,SAAS,WAAwB,IAAtBN,EAAqB,uDAAb,UAEbe,EAAO,mCACP3B,EAAG,mEAA+DY,EAA/D,mBAA8Ee,GAErFC,MAAM5B,GACH6B,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAArB,GACJ,EAAKwB,SAAS,CACZxB,KAAKA,EAAKyB,e,mFAdhBzC,KAAK0B,a,+BAqBH,OACE,yBAAK3B,UAAU,aACb,kBAAC,EAAD,CAAQG,OAAO,aACf,yBAAKH,UAAU,0DACf,kBAAC,EAAD,CACA2B,SAAU1B,KAAK0B,WAEf,kBAAC,EAAD,CACAV,KAAMhB,KAAKkC,MAAMlB,a,GApCXb,aCMZuC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTZ,MAAK,SAAAiB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtB,QACfiB,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,YCtFjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDY1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,YAAwB3B,OAAOC,SAAS/B,MACpD0D,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,YAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCd,MAAMa,GACHZ,MAAK,SAAAqC,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM3C,MAAK,SAAAiB,GACjCA,EAAa2B,aAAa5C,MAAK,WAC7BO,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEArFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM3C,MAAK,WACjCuB,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCnC/BE,I","file":"static/js/main.b90b4940.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './css/Header.css'\nclass Header extends Component {\n\n    render() {\n        return (\n        \t<>\n            <header className=\"nav justify-content-center bg-info\">\n            \t<h1>{this.props.titulo}</h1>\n            </header>\n            </>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\n\nclass New extends Component {\n\n\trender() {\n\t\tconst { urlToImage, title, url, source,description } = this.props.Nw;\n\t\t//console.log()\n\t\treturn (\n\t\t\t<div className='col sm-12 md-6 ml-4'>\n\t\t\t\t<div className=\"card\">\n\t\t\t\t  <img src={urlToImage} className=\"card-img-top\" alt={title}/>\n\t\t\t\t  <span className=\"card-title\">{source.name}</span>\n\t\t\t\t  <div className=\"card-body\">\n\t\t\t\t    <h5 className=\"card-title\">{title}</h5>\n\t\t\t\t    <p className=\"card-text\">{description}</p>\n\t\t\t\t    <a href={url} className=\"btn btn-primary\" target=\"_blank\">Ver Mas</a>\n\t\t\t\t  </div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default New;","import React, { Component } from 'react';\n\nimport New from './New.jsx';\n\nclass News extends Component {\n    \n\n    render() {\n        return (\n            <div className=\"row\">\n\t            {this.props.News.map(Nw=>(\n\t            \t\t<New\n\t            \t\tkey={Nw.url}\n\t            \t\tNw={Nw}\n\t            \t\t/>\n\t            \t))}\n            </div>\n        );\n    }\n}\n\nexport default News;\n","import React, { Component } from 'react';\n\nclass Form extends Component {\n\n\tCatg = React.createRef();\n\n\tSendC =(e)=>{\n\t\te.preventDefault();\n\n\t\tthis.props.consNews(this.Catg.current.value);\n\t}\n\n    render() {\n        return (\n            \n            \t<div className=\"form-inline justify-content-center my-3\">\n            \t\t<div className=\"form-group\">\n\t            \t\t<form onSubmit={this.SendC}>\n\t            \t\t\t<h2> News per Category </h2>\n\t            \t\t\t\n\t\t\t\t\t\t\t\t<select ref={this.Catg} className=\"form-control h-75\">\n\t\t\t\t\t\t\t\t\t<option value=\"general\" defaultValue>General</option>\n\t\t\t\t\t\t\t\t\t<option value=\"entertainment\" defaultValue>Entretenimiento</option>\n\t\t\t\t\t\t\t\t\t<option value=\"health\" defaultValue>Salud</option>\n\t\t\t\t\t\t\t\t\t<option value=\"science\" defaultValue>Ciencia</option>\n\t\t\t\t\t\t\t\t\t<option value=\"sports\" defaultValue>Deportes</option>\n\t\t\t\t\t\t\t\t\t<option value=\"technology\" defaultValue>Tecnologia</option>\n\t\t\t\t\t\t\t\t</select>\t\t\t\t\t\t\t\n\t            \t\t\n\t            \t\t\t\n\t            \t\t\t\t<input type=\"submit\" className=\"btn bg-success text-dark\" value=\"Buscar\"/>\n\t            \t\t\n\t            \t\t</form>\n            \t\t</div>\n            \t</div>\n            \n        );\n    }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\n\nimport Header from './components/Header/Header.jsx';\nimport News from './components/News.jsx';\nimport Form from './components/Form.jsx';\n\nclass App extends Component {\n\n    state = {\n      News:[]\n    }\n\n    componentDidMount(){\n      this.consNews();\n    }\n\n    consNews=( Catg  = \"general\" )=>{\n\n      let APid = \"1fef6d9a38ef4be7bdaf857099d9978b\";\n      let url = `https://newsapi.org/v2/top-headlines?country=mx&category=${Catg}&apiKey=${APid}`\n      \n      fetch(url)\n        .then(res=>{\n          return res.json();\n        })\n        .then(News =>{\n          this.setState({\n            News:News.articles\n          })\n          //console.log(this.state.News)\n        })\n    }\n\n    render() {\n        return (\n          <div className=\"container\">\n            <Header titulo=\"Noticias\"/>\n            <div className=\"container bg-white mt-3 rounded justify-content-center\">\n            <Form\n            consNews={this.consNews}\n            />\n            <News\n            News={this.state.News}\n            />\n            </div>\n          </div>        \n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/js/bootstrap.js'\nimport './App.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}